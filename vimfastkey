###################光标移动##################################################################
以下移动都是在normal模式下。

    h或退格: 左移一个字符；
    l或空格: 右移一个字符；
    j 下移一行；
    k 上移一行；
    gj 移动到一段内的下一行；
    gk 移动到一段内的上一行；
    +或Enter: 把光标移至下一行第一个非空白字符。
    - 把光标移至上一行第一个非空白字符。
    w 前移一个单词，光标停在下一个单词开头；
    W 移动下一个单词开头，但忽略一些标点；
    e 前移一个单词，光标停在下一个单词末尾；
    E 移动到下一个单词末尾，如果词尾有标点，则移动到标点；
    b 后移一个单词，光标停在上一个单词开头；
    B 移动到上一个单词开头，忽略一些标点；
    ge 后移一个单词，光标停在上一个单词末尾；
    gE 同 ge ，不过‘单词’包含单词相邻的标点。
    ( 前移1句。
    ) 后移1句。
    { 前移1段。
    } 后移1段。
    fc 把光标移到同一行的下一个c字符处
    Fc 把光标移到同一行的上一个c字符处
    tc 把光标移到同一行的下一个c字符前
    Tc 把光标移到同一行的上一个c字符后
    ;: 配合f & t使用，重复一次
    ,: 配合f & t使用，反向重复一次

上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。

    0 移动到行首。
    g0 移到光标所在屏幕行行首。
    ^ 移动到本行第一个非空白字符。
    g^ 同 ^ ，但是移动到当前屏幕行第一个非空字符处。
    $ 移动到行尾。
    g$ 移动光标所在屏幕行行尾。
    n| 把光标移到递n列上。
    nG 到文件第n行。
    :n<cr> 移动到第n行。
    :$<cr> 移动到最后一行。
    H 把光标移到屏幕最顶端一行。
    M 把光标移到屏幕中间一行。
    L 把光标移到屏幕最底端一行。
    gg 到文件头部。
    G 到文件尾部。

#######################################################################################################
剪切复制和寄存器
y 复制在可视模式下选中的文本 


#######################################################################################################
[n]s 以输入的文本替代光标之后1(n)个字符

#######################################################################################################

ci', di', yi'：修改、剪切或复制'之间的内容。
ca', da', ya'：修改、剪切或复制'之间的内容，包含'。
ci", di", yi"：修改、剪切或复制"之间的内容。
ca", da", ya"：修改、剪切或复制"之间的内容，包含"。
ci(, di(, yi(：修改、剪切或复制()之间的内容。
ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。
ci[, di[, yi[：修改、剪切或复制[]之间的内容。
ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。
ci{, di{, yi{：修改、剪切或复制{}之间的内容。
ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。
ci<, di<, yi<：修改、剪切或复制<>之间的内容。
ca<, da<, ya<：修改、剪切或复制<>之间的内容，包含<>


#######################################################################################################
[[: 跳转到上一个函数块开始，需要有单独一行的{。
]]: 跳转到下一个函数块开始，需要有单独一行的{


#######################################################################################################
文件的编码
    :e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
    :w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
    :set fenc或:set fileencoding，查看当前文件的编码。
    在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式


 
#######################################################################################################
文件格式

大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。

    :e ++ff=dos filename, 让vim用dos格式打开这个文件。
    :w ++ff=mac filename, 以mac格式存储这个文件。
    :set ff，显示当前文件的格式。
    在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。


#######################################################################################################
折叠

zc -- 收起折叠；
za -- 打开/关闭当前折叠；
zr -- 打开嵌套的折行；
zm -- 收起嵌套的折行；



#######################################################################################################
 执行外部命令

    :! cmd 执行外部命令。
    :!! 执行上一次的外部命令。
    :sh 调用shell，用exit返回vim。
    :r !cmd 将命令的返回结果插入文件当前位置

#######################################################################################################
工作目录

    :pwd 显示vim的工作目录。
    :cd path 改变vim的工作目录。
    :set autochdir 可以让vim 根据编辑的文件自动切换工作目录

#######################################################################################################
